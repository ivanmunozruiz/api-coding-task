name: CI

on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      db:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: lotr
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root --password=root"
          --health-interval=30s
          --health-timeout=10s
          --health-retries=3
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, pdo_mysql, redis

      - name: Cache Composer dependencies
        uses: actions/cache@v2
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Clear Composer cache
        run: composer clear-cache

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-suggest --no-interaction

      - name: Import init-test.sql
        run: |
          mysql -h 127.0.0.1 -u root --password=root < opt/db/init-test.sql

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Run tests
        run: |
          export DATABASE_URL="mysql://root:root@127.0.0.1:3306/lotr?serverVersion=8.0.32&charset=utf8mb4"
          export REDIS_HOST=127.0.0.1
          export REDIS_PORT=6379
          export REDIS_PASS=null
          export REDIS_DB=0
          ./vendor/bin/behat --no-snippets --strict --colors -v

      - name: Run PHPStan
        run: ./vendor/bin/phpstan analyse

      - name: Run PHP-CS-Fixer
        run: ./vendor/bin/php-cs-fixer fix --dry-run --diff

      - name: Run PHPUnit with coverage
        run: ./vendor/bin/phpunit 

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          file: coverage.xml

      - name: Check for security vulnerabilities
        run: composer audit

