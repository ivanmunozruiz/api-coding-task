# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
  api-coding-task.mapping.events:
    'api-coding-task.lotr.1.domain-event.character.created': 'App\LotrContext\Domain\Event\Character\CharacterCreated'
    'api-coding-task.lotr.1.domain-event.faction.created': 'App\LotrContext\Domain\Event\Faction\FactionCreated'
    'api-coding-task.lotr.1.domain-event.equipment.created': 'App\LotrContext\Domain\Event\Equipment\EquipmentCreated'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
      resource: '%kernel.project_dir%/src/*'
      exclude: '%kernel.project_dir%/src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'
    _instanceof:
      App\Shared\Application\Command\CommandHandler:
        tags:
          - { name: messenger.message_handler, bus: command.bus }
      App\Shared\Application\Event\EventHandler:
        tags:
          - { name: messenger.message_handler, bus: event.bus }
      App\Shared\Application\Query\QueryHandler:
        tags:
          - { name: messenger.message_handler, bus: query.bus }
    context.error_handler:
      class: App\Shared\Infrastructure\ErrorHandler\ErrorHandler
      tags:
        - { name: kernel.event_listener, event: kernel.exception, method: __invoke }
    messenger.transport.amqp.factory:
      class: App\Shared\Infrastructure\Messaging\Transport\AmqpTransportFactory

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Shared\Infrastructure\Delivery\Rest\:
      autowire: true
      autoconfigure: true
      resource: '%kernel.project_dir%/src/Shared/Infrastructure/Delivery/Rest'
      tags: [ 'controller.service_arguments' ]
    App\LotrContext\Infrastructure\Delivery\Rest\:
      autowire: true
      autoconfigure: true
      resource: '%kernel.project_dir%/src/LotrContext/Infrastructure/Delivery/Rest'
      tags: [ 'controller.service_arguments' ]
    App\AuthorisationContext\Infrastructure\Domain\Service\Authenticator:
      public: true
      bind:
        $adminApiKey: '%env(resolve:ADMIN_API_KEY)%'
    Predis\Client:
      arguments:
        $parameters: "redis://%env(REDIS_HOST)%:%env(int:REDIS_PORT)%/%env(int:REDIS_DB)%"
    App\AuthorisationContext\Infrastructure\Domain\Repository\UserRepository:
      public: true
      bind:
        $adminId: '%env(resolve:ADMIN_USER_ID)%'


    App\Shared\Infrastructure\Messaging\Transformer\ArrayToDomainMessageTransformer:
        public: true
        arguments:
            $mappings: '%api-coding-task.mapping.events%'
