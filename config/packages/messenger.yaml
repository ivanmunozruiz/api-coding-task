framework:
    messenger:
        transports:
          commands:
            dsn: 'sync://'
          queries: 'sync://'
          events:
            dsn: 'sync://'
          events_async:
            dsn : 'amqp://%env(RABBIT_USER)%:%env(RABBIT_PASS)%@%env(RABBIT_HOST)%:%env(RABBIT_PORT)%'
            serializer: App\Shared\Infrastructure\Messaging\Serializer\MessageSerializer
            options:
              auto_setup: true
              exchange:
                  name: 'api-coding-task-async-events'
                  type: topic
              queues:
                  api-coding-task-async-events:
                      binding_keys: [
                        # Faction events
                        'api-coding-task.lotr.1.domain-event.faction.created',
                        #'api-coding-task.lotr.1.domain-event.faction.updated',
                        #'api-coding-task.lotr.1.domain-event.faction.deleted',

                        # Equipment events
                        'api-coding-task.lotr.1.domain-event.equipment.created',
                        #'api-coding-task.lotr.1.domain-event.equipment.updated',
                        #'api-coding-task.lotr.1.domain-event.equipment.deleted',

                        # Character events
                        'api-coding-task.lotr.1.domain-event.character.created',
                        #'api-coding-task.lotr.1.domain-event.character.updated',
                        #'api-coding-task.lotr.1.domain-event.character.deleted',
                      ]
                      arguments:
                        x-dead-letter-exchange: '%env(APP_NAME)%-dead-letter'
          failed:
            dsn: 'amqp://%env(RABBIT_USER)%:%env(RABBIT_PASS)%@%env(RABBIT_HOST)%:%env(RABBIT_PORT)%'
            options:
              exchange:
                name: '%env(APP_NAME)%-dead-letter'
                type: topic
              queues:
                '%env(APP_NAME)%-dead-letter': ~
        failure_transport: failed
        # The bus that is going to be injected when injecting MessageBusInterface.
        default_bus: command.bus
        serializer:
          # Service id to use as the default serializer for the transports.
          default_serializer: messenger.transport.symfony_serializer
          symfony_serializer:
            format: json
            context: { }

        routing:
          App\Shared\Application\Command\Command: commands
          App\Shared\Domain\Aggregate\DomainEventMessage:  events_async

        buses:
          none.bus:
            default_middleware: allow_no_handlers
          command.bus:
            middleware:
              - 'doctrine_ping_connection'
              - 'doctrine_close_connection'
              - 'send_message'
              - 'doctrine_transaction'
          query.bus: ~
          event.bus:
            default_middleware: allow_no_handlers
            middleware:
              - 'doctrine_ping_connection'
              - 'doctrine_close_connection'
              - App\Shared\Infrastructure\Messaging\Middleware\RoutingKeyMiddleware
              - App\Shared\Infrastructure\Messaging\Middleware\MessageMiddleware
              - 'doctrine_transaction'
